// <auto-generated />
using System;
using ContactManager.DB;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ContactManager.Migrations
{
    [DbContext(typeof(ContactManagerContext))]
    [Migration("20240901094554_ContactManager")]
    partial class ContactManager
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("ContactManager.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DepartmentId");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("ContactManager.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Gender")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("SocialSecurityNumber")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Person", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ContactManager.Models.Customer", b =>
                {
                    b.HasBaseType("ContactManager.Models.Person");

                    b.Property<string>("CompanyContact")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("CustomerType")
                        .HasColumnType("int");

                    b.ToTable("Customer", (string)null);
                });

            modelBuilder.Entity("ContactManager.Models.Employee", b =>
                {
                    b.HasBaseType("ContactManager.Models.Person");

                    b.Property<int>("CadreLevel")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<Guid>("EmployeeNumber")
                        .HasColumnType("char(36)");

                    b.Property<int>("Employment")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("ContactManager.Models.Trainee", b =>
                {
                    b.HasBaseType("ContactManager.Models.Employee");

                    b.Property<int>("ActualTraineeYear")
                        .HasColumnType("int");

                    b.Property<int>("TraineeYears")
                        .HasColumnType("int");

                    b.ToTable("Trainee", (string)null);
                });

            modelBuilder.Entity("ContactManager.Models.Person", b =>
                {
                    b.OwnsOne("ContactManager.Models.Address", "Address", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("int");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("place");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("street");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("streetNumber");

                            b1.Property<int>("ZipCode")
                                .HasColumnType("int")
                                .HasColumnName("zipCode");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.OwnsOne("ContactManager.Models.CommuncationInfo", "CommunicationInfo", b1 =>
                        {
                            b1.Property<int>("PersonId")
                                .HasColumnType("int");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("email");

                            b1.Property<string>("PhoneNumberBusiness")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("phoneNumberBusiness");

                            b1.Property<string>("PhoneNumberMobile")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("phoneNumberMobile");

                            b1.Property<string>("PhoneNumberPrivate")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("phoneNumberPrivate");

                            b1.HasKey("PersonId");

                            b1.ToTable("Person");

                            b1.WithOwner()
                                .HasForeignKey("PersonId");
                        });

                    b.Navigation("Address")
                        .IsRequired();

                    b.Navigation("CommunicationInfo")
                        .IsRequired();
                });

            modelBuilder.Entity("ContactManager.Models.Customer", b =>
                {
                    b.HasOne("ContactManager.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("ContactManager.Models.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ContactManager.Models.Note", "Notes", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasColumnName("id");

                            b1.Property<int?>("CustomerId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("Date")
                                .HasColumnType("datetime(6)")
                                .HasColumnName("date");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("longtext")
                                .HasColumnName("text");

                            b1.HasKey("Id");

                            b1.HasIndex("CustomerId");

                            b1.ToTable("Note");

                            b1.WithOwner()
                                .HasForeignKey("CustomerId");
                        });

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("ContactManager.Models.Employee", b =>
                {
                    b.HasOne("ContactManager.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactManager.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("ContactManager.Models.Employee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("ContactManager.Models.Trainee", b =>
                {
                    b.HasOne("ContactManager.Models.Employee", null)
                        .WithOne()
                        .HasForeignKey("ContactManager.Models.Trainee", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
